import sqlite3

# Conectar ao banco de dados (ou criar um novo)
conn = sqlite3.connect('Vertices.db')

# Criar um cursor
cursor = conn.cursor()

cursor.execute("PRAGMA table_info(Vertices);") #teste para a visualizacao 
vertices_info = cursor.fetchall()

for column in vertices_info:
  print(column)

# Criar a tabela Vertices
cursor.execute('''
CREATE TABLE IF NOT EXISTS Vertices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    categoria  TEXT CHECK(categoria IN ('Codigo fonte', 'Framework', 'Biblioteca', 'Banco de dados', 'Servidor', 'Back end', 'Design', 'API', 'Analisadores de dados', 'Gerenciamento empresarial', 'Seguranca', 'DevOps')),
    posicao TEXT NOT NULL
)
''')
# Criar a tabela de arestas
cursor.executescript('''
CREATE TABLE IF NOT EXISTS Arestas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    custos REAL NOT NULL,
    vertices_id INTEGER,
    vertice_origem INTEGER,
    vertice_destino INTEGER,
    FOREIGN KEY (vertices_id) REFERENCES Vertices(id)
    FOREIGN KEY (vertice_origem) REFERENCES Vertices(id)
    FOREIGN KEY (vertice_destino) REFERENCES Vertices(id)
)
''')
#criar a tabela de grafos (principal)
cursor.execute('''
CREATE TABLE IF NOT EXISTS Grafos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_categoria TEXT NOT NULL,
    Vertices TEXT NOT NULL, 
    Relacoes TEXT NOT NULL
)
''')

cursor.execute("PRAGMA table_info(Arestas);") #teste para a visualizacao 
arestas_info = cursor.fetchall()

for column in arestas_info:
  print(column)

cursor.execute
# Salvar (commit) as alterações
conn.commit()
# Fechar a conexão
conn.close()
print("Banco de dados e tabela criados com sucesso!")
